# .cursorrules

## 项目目标
- 为Cursor编辑器开发一个增强生产力和用户体验的扩展插件。
- 专注于提高代码编辑效率、改善开发者工作流程以及简化日常任务管理。

## 代码风格与结构
- 使用TypeScript编写，确保代码具备清晰的类型定义。
- 遵循函数式编程模式，避免使用类。
- 采用描述性强的变量命名规则，如`isLoading`, `hasPermission`。
- 按逻辑模块组织文件结构，便于维护和扩展。
- 实现全面的错误处理机制，并集成日志记录以辅助调试。
- 使用JSDoc注释代码，确保良好的文档化。

## 文件头注释规范
- 所有源代码文件必须包含标准化的文件头注释
- 注释必须包含：文件名、说明、创建日期、最后修改日期、作者信息
- 对于特殊功能文件，需要添加额外的说明和注意事项
- 文件头注释应保持整洁和一致性

## 测试规范
- 新增功能必须包含对应的单元测试
- 测试文件应放置在对应模块的test目录下
- 测试用例要覆盖正常流程和异常情况
- 保持测试代码的可读性和可维护性

## 文档更新规则
- README.md文件应及时反映项目的最新状态
- 文档更新应包含功能说明和使用示例
- 重要更新需要在更新日志中记录
- 保持文档的结构清晰和易于导航

## 架构设计
- 紧密遵循编辑器扩展API的最佳实践和要求。
- 根据最小权限原则配置必要的权限。
- 使用现代构建工具（如vite）进行开发。
- 设计CI/CD管道以支持自动化测试和部署。

## API与交互
- 正确使用编辑器提供的API，确保与宿主环境的良好集成。
- 处理异步操作时优先使用Promises或async/await语法。
- 对于需要后台持续运行的任务，利用服务工作者或类似的后台脚本机制。
- 实现安全的消息传递机制，保证组件间的通信安全可靠。

## 安全性与隐私
- 实施严格的内容安全策略(CSP)，防止XSS和其他类型的攻击。
- 在处理用户数据时采取加密措施，保护敏感信息。
- 确保跨域请求的安全处理，遵守同源政策。

## 性能优化
- 努力减少资源消耗，避免内存泄漏和其他性能问题。
- 优化后台脚本的执行效率，特别是在长时间运行的情况下。
- 实现缓存机制，减少不必要的重复计算和网络请求。

## 用户体验
- 遵循Material Design或其他流行的设计系统，提供一致的视觉体验。
- 创建响应式的UI元素，适应各种屏幕尺寸和分辨率。
- 提供明确的用户反馈，包括加载状态指示和错误信息展示。
- 支持键盘导航和快捷键，提升无障碍访问能力。

## 发布与维护
- 准备详细的商店列表和截图，撰写清晰的隐私政策。
- 实施版本控制系统，管理变更历史。
- 定期收集用户反馈，持续改进产品。
- 维护详尽的文档，帮助用户和贡献者快速上手。

## 遵循官方文档
- 参考[VS Code扩展开发文档](https://code.visualstudio.com/api)或相应的官方指南。
- 跟踪官方平台的更新和变化，确保扩展兼容最新版本。

## 输出期望
- 提供清晰且可工作的代码。
- 包含必要的错误处理逻辑，保障程序健壮性。
- 遵守安全最佳实践，保护用户数据。
- 确保跨平台兼容性，满足不同操作系统需求。
- 编写易于维护和扩展的代码，便于后续迭代。 